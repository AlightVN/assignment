{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-13T03:42:30.826Z",
    "end": "2023-06-13T03:42:32.474Z",
    "duration": 1648,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8ce8d8a5-04b7-4589-9116-ce745c8a3bbc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "822a5bdd-3b1b-41ae-9283-5c70acc5b8bd",
          "title": "POST /users",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\auth.test.js",
          "file": "\\test\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /users\"",
              "fullTitle": "POST /users \"before all\" hook in \"POST /users\"",
              "timedOut": false,
              "duration": 99,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete all existing users before each test\nawait User.destroy({ where: {} });",
              "err": {},
              "uuid": "b8061970-bc34-4242-89b1-ace871001cd5",
              "parentUUID": "822a5bdd-3b1b-41ae-9283-5c70acc5b8bd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create new user successfully",
              "fullTitle": "POST /users Create new user successfully",
              "timedOut": false,
              "duration": 573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  userName: 'testuser',\n  password: 'Test@123',\n  employeeNumber: 1,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(newUser)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('user');\n    res.body.user.should.have.property('userName').eql(newUser.userName);\n    res.body.user.should.have.property('employeeNumber').eql(newUser.employeeNumber);\n    res.body.should.have.property('token');\n    done();\n  });",
              "err": {},
              "uuid": "d9f7f8ba-5057-4278-8420-7d2978f39862",
              "parentUUID": "822a5bdd-3b1b-41ae-9283-5c70acc5b8bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new user fails with invalid data",
              "fullTitle": "POST /users Create new user fails with invalid data",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = {\n  userName: 'te',\n  password: 'Test123',\n  employeeNumber: 2,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(invalidUser)\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message');\n    done();\n  });",
              "err": {},
              "uuid": "54c28999-3685-4a96-be8c-2c9bad49681e",
              "parentUUID": "822a5bdd-3b1b-41ae-9283-5c70acc5b8bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login user with valid credentials",
              "fullTitle": "POST /users Login user with valid credentials",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginUser().then((res) => {\n  res.should.have.status(200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('token');\n  done();\n});",
              "err": {},
              "uuid": "c91873da-51c9-4ce8-a65a-43a8664f6dff",
              "parentUUID": "822a5bdd-3b1b-41ae-9283-5c70acc5b8bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9f7f8ba-5057-4278-8420-7d2978f39862",
            "54c28999-3685-4a96-be8c-2c9bad49681e",
            "c91873da-51c9-4ce8-a65a-43a8664f6dff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 928,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
          "title": "Employee Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\employee.test.js",
          "file": "\\test\\employee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Employee Test\"",
              "fullTitle": "Employee Test \"before all\" hook in \"Employee Test\"",
              "timedOut": false,
              "duration": 207,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "e223f573-eadc-4eb9-ae98-96f5f29c0edf",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetch list of employees",
              "fullTitle": "Employee Test Fetch list of employees",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "2d493319-a222-4d70-a82b-2cf1b51841b6",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new employee successfully",
              "fullTitle": "Employee Test Create new employee successfully",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = {\n  firstName: \"Alight\",\n  lastName: \"Legend\",\n  extension: \"Legend\",\n  email: \"111@gmail.com\",\n  officeCode: 3,\n  reportsTo: null,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .post('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newEmployee)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Employee created successfully\");\n    idTest = res.body.data.id;\n    done();\n  });",
              "err": {},
              "uuid": "4fd2cdf2-5568-4b4a-9898-4dfbdf9562e1",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch employee by newly created ID",
              "fullTitle": "Employee Test Fetch employee by newly created ID",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "07082f18-6388-4b1f-9fee-00b18c3c6399",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update employee successfully",
              "fullTitle": "Employee Test Update employee successfully",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmployee = {\n  firstName: \"Updated\",\n  extension: \"Legend\",\n  email: \"updated@gmail.com\",\n  officeCode:  3,\n  reportsTo: 2,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .put(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee updated successfully');\n    done();\n  });",
              "err": {},
              "uuid": "cf34fa8b-3219-4074-a8d5-a2062ca7aa14",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete employee successfully",
              "fullTitle": "Employee Test Delete employee successfully",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee deleted successfully');\n    done();\n  });",
              "err": {},
              "uuid": "7a76c46e-d15b-4327-96fe-1aa0b014badf",
              "parentUUID": "d8b0855e-51a3-4abf-aa3f-81854b146ed7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d493319-a222-4d70-a82b-2cf1b51841b6",
            "4fd2cdf2-5568-4b4a-9898-4dfbdf9562e1",
            "07082f18-6388-4b1f-9fee-00b18c3c6399",
            "cf34fa8b-3219-4074-a8d5-a2062ca7aa14",
            "7a76c46e-d15b-4327-96fe-1aa0b014badf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 261,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}