{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-15T03:12:16.786Z",
    "end": "2023-06-15T03:12:18.134Z",
    "duration": 1348,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2ee7e38b-f197-4112-8ec6-ee49cef05492",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f47f2703-daae-4657-8227-4ee97c6d9f48",
          "title": "POST /users",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
          "file": "\\test\\1_auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /users\"",
              "fullTitle": "POST /users \"before all\" hook in \"POST /users\"",
              "timedOut": false,
              "duration": 78,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete all existing users before each test\nawait User.destroy({ where: {userName: 'testuser'} });",
              "err": {},
              "uuid": "1119f10c-f28b-456f-a589-6797a0c399e4",
              "parentUUID": "f47f2703-daae-4657-8227-4ee97c6d9f48",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create new user successfully",
              "fullTitle": "POST /users Create new user successfully",
              "timedOut": false,
              "duration": 246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  userName: 'testuser',\n  password: 'Test@123',\n  employeeNumber: 9,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(newUser)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('user');\n    res.body.user.should.have.property('userName').eql(newUser.userName);\n    res.body.user.should.have.property('employeeNumber').eql(newUser.employeeNumber);\n    res.body.should.have.property('token');\n    done();\n  });",
              "err": {},
              "uuid": "a8bf27e3-f2cf-4972-a4f9-ad0bbc402236",
              "parentUUID": "f47f2703-daae-4657-8227-4ee97c6d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new user fails with invalid data",
              "fullTitle": "POST /users Create new user fails with invalid data",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = {\n  userName: 'te',\n  password: 'Test123',\n  employeeNumber: 2,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(invalidUser)\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message');\n    done();\n  });",
              "err": {},
              "uuid": "6ece7716-3c57-4c11-a918-384e2e18e71f",
              "parentUUID": "f47f2703-daae-4657-8227-4ee97c6d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login user with valid credentials",
              "fullTitle": "POST /users Login user with valid credentials",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginUser().then((res) => {\n  res.should.have.status(200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('token');\n  done();\n});",
              "err": {},
              "uuid": "ea1671ed-c448-4851-8d93-c56fee43ca3a",
              "parentUUID": "f47f2703-daae-4657-8227-4ee97c6d9f48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8bf27e3-f2cf-4972-a4f9-ad0bbc402236",
            "6ece7716-3c57-4c11-a918-384e2e18e71f",
            "ea1671ed-c448-4851-8d93-c56fee43ca3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 448,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "85797304-0d81-4f83-a06f-5a35a6c6790d",
          "title": "Employee Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
          "file": "\\test\\2_employee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Employee Test\"",
              "fullTitle": "Employee Test \"before all\" hook in \"Employee Test\"",
              "timedOut": false,
              "duration": 157,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "f68bd3c9-e53c-44eb-9a72-789bd531294c",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetch list of employees",
              "fullTitle": "Employee Test Fetch list of employees",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "8f63e615-ec01-4e59-bdd7-66d0112af6dd",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new employee successfully",
              "fullTitle": "Employee Test Create new employee successfully",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = {\n  firstName: \"Alight\",\n  lastName: \"Legend\",\n  extension: \"Legend\",\n  email: \"111@gmail.com\",\n  officeCode: 3,\n  reportsTo: null,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .post('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newEmployee)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Employee created successfully\");\n    idTest = res.body.data.id;\n    done();\n  });",
              "err": {},
              "uuid": "f9c8b47d-38d1-4750-b9f6-8f18a3789262",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch employee by newly created ID",
              "fullTitle": "Employee Test Fetch employee by newly created ID",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "9fb1cc5d-518d-49d5-b19e-3255a12e54c6",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update employee successfully",
              "fullTitle": "Employee Test Update employee successfully",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmployee = {\n  firstName: \"Updated\",\n  extension: \"Legend\",\n  email: \"updated@gmail.com\",\n  officeCode:  3,\n  reportsTo: 2,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .put(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee updated successfully');\n    done();\n  });",
              "err": {},
              "uuid": "169fea43-5351-492e-b806-7678bbe9a584",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete employee successfully",
              "fullTitle": "Employee Test Delete employee successfully",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee deleted successfully');\n    done();\n  });",
              "err": {},
              "uuid": "34402648-f212-41b4-b16e-e370ba497cd7",
              "parentUUID": "85797304-0d81-4f83-a06f-5a35a6c6790d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f63e615-ec01-4e59-bdd7-66d0112af6dd",
            "f9c8b47d-38d1-4750-b9f6-8f18a3789262",
            "9fb1cc5d-518d-49d5-b19e-3255a12e54c6",
            "169fea43-5351-492e-b806-7678bbe9a584",
            "34402648-f212-41b4-b16e-e370ba497cd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 263,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
          "title": "Customer Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
          "file": "\\test\\3_customer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Customer Test\"",
              "fullTitle": "Customer Test \"before all\" hook in \"Customer Test\"",
              "timedOut": false,
              "duration": 156,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "3d21c168-e142-4d32-8e39-baf0b56ecb92",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Customer Test\"",
              "fullTitle": "Customer Test \"after all\" hook in \"Customer Test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the user with username 'testUser' after all tests are completed\nawait User.destroy({ where: {userName: 'testuser'} });",
              "err": {},
              "uuid": "4b68f056-5979-4f76-bc00-9a1196b31ad5",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Fetch list of customers",
              "fullTitle": "Customer Test Fetch list of customers",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "c4f5612a-ec7e-4790-8488-c3210ecd89be",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new customer successfully",
              "fullTitle": "Customer Test Create new customer successfully",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newCustomer = {\n  customerName: \"New Customer\",\n  contactLastName: \"Doe\",\n  contactFirstName: \"John\",\n  phone: \"1234567890\",\n  addressLine1: \"123 Main Street\",\n  addressLine2: null,\n  city: \"New York\",\n  state: \"NY\",\n  postalCode: \"10001\",\n  country: \"USA\",\n  salesRepEmployeeNumber: 1,\n  creditLimit: 1000,\n};\n\nchai.request(app)\n  .post('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newCustomer)\n  .end((err, res) => {\n    console.log( res.body)\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Created customer successfully\");\n    customerId = res.body.data.customerNumber;\n    done();\n  });",
              "err": {},
              "uuid": "e5ca5b5f-74ec-4399-89b0-3a779eabf41c",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch customer by newly created ID",
              "fullTitle": "Customer Test Fetch customer by newly created ID",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "df1702f0-eccf-41bb-b310-cb8f69a16662",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer successfully",
              "fullTitle": "Customer Test Update customer successfully",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedCustomer = {\n  customerName: \"Updated Customer\",\n  contactLastName: \"Smith\",\n  contactFirstName: \"Jane\",\n  phone: \"0987654321\",\n  addressLine1: \"456 Main Street\",\n  city: \"New York\",\n  country: \"USA\"\n};\n\nchai.request(app)\n  .put(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedCustomer)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Updated customer successfully');\n    done();\n  });",
              "err": {},
              "uuid": "26a6716a-ba43-4f47-bd4e-af9445af0017",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer successfully",
              "fullTitle": "Customer Test Delete customer successfully",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    console.log(res.body);\n    res.should.have.status(204);\n    res.body.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "9f81b17d-a5a5-484b-88b8-78ce6b16d41a",
              "parentUUID": "6aca9709-3384-49a0-9af0-f2ed256fa4de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4f5612a-ec7e-4790-8488-c3210ecd89be",
            "e5ca5b5f-74ec-4399-89b0-3a779eabf41c",
            "df1702f0-eccf-41bb-b310-cb8f69a16662",
            "26a6716a-ba43-4f47-bd4e-af9445af0017",
            "9f81b17d-a5a5-484b-88b8-78ce6b16d41a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}