{
  "stats": {
    "suites": 15,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-16T08:01:54.158Z",
    "end": "2023-06-16T08:01:54.294Z",
    "duration": 136,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac804e15-567a-4896-a096-c761945c4c3e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "976f0623-14d5-44e0-98a1-34e8c71f6fd5",
          "title": "User",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
          "file": "\\test\\1_auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b6d25f1-f26f-44c8-8c38-17d869ceb7f4",
              "title": "#register",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
              "file": "\\test\\1_auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#register\"",
                  "fullTitle": "User #register \"before each\" hook in \"#register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore(); // Khôi phục tất cả các stub trước mỗi bài kiểm tra",
                  "err": {},
                  "uuid": "7b3b0ffb-2f74-4192-9154-21c9cc9b58a1",
                  "parentUUID": "6b6d25f1-f26f-44c8-8c38-17d869ceb7f4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new user",
                  "fullTitle": "User #register should create a new user",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeUsername = 'john.doe';\nconst fakePassword = 'password123';\nconst fakeEncryptedPassword = 'encrypted-password';\nconst fakeUserData = { id: 1, username: fakeUsername };\nconst bcryptStub = sinon.stub(bcrypt, 'hashSync').returns(fakeEncryptedPassword);\nconst createStub = sinon.stub(TestUser, 'create').resolves(fakeUserData);\nconst result = await TestUser.register(fakeUsername, fakePassword);\nexpect(result).to.deep.equal(fakeUserData);\nexpect(bcryptStub.calledOnceWith(fakePassword, sinon.match.number)).to.be.true;\nexpect(createStub.calledOnceWith({ userName: fakeUsername, password: fakeEncryptedPassword })).to.be.true;",
                  "err": {},
                  "uuid": "31793bd8-728b-4fc4-a012-33acb4e0158f",
                  "parentUUID": "6b6d25f1-f26f-44c8-8c38-17d869ceb7f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31793bd8-728b-4fc4-a012-33acb4e0158f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc32bcf8-bf7e-4d9d-951f-9ee229d9a0be",
              "title": "#login",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
              "file": "\\test\\1_auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#login\"",
                  "fullTitle": "User #login \"before each\" hook in \"#login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore(); // Khôi phục tất cả các stub trước mỗi bài kiểm tra",
                  "err": {},
                  "uuid": "923a8ba9-b434-421b-81db-93535b5b09d6",
                  "parentUUID": "fc32bcf8-bf7e-4d9d-951f-9ee229d9a0be",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should log in with valid credentials",
                  "fullTitle": "User #login should log in with valid credentials",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeUsername = 'john.doe';\nconst fakePassword = 'password123';\nconst fakeEncryptedPassword = 'encrypted-password';\nconst fakeUserData = { id: 1, username: fakeUsername, password: fakeEncryptedPassword };\nconst bcryptStub = sinon.stub(bcrypt, 'compare').resolves(true);\nconst findOneStub = sinon.stub(TestUser, 'findOne').resolves(fakeUserData);\nconst result = await TestUser.login(fakeUsername, fakePassword);\nexpect(result).to.deep.equal(fakeUserData);\nexpect(bcryptStub.calledOnceWith(fakePassword, fakeEncryptedPassword)).to.be.true;\nexpect(findOneStub.calledOnceWith({ where: { userName: fakeUsername } })).to.be.true;",
                  "err": {},
                  "uuid": "3094eb4a-a74e-40ea-bc2b-d069695adf30",
                  "parentUUID": "fc32bcf8-bf7e-4d9d-951f-9ee229d9a0be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error with invalid credentials",
                  "fullTitle": "User #login should throw an error with invalid credentials",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeUsername = 'john.doe';\nconst fakePassword = 'password123';\nconst bcryptStub = sinon.stub(bcrypt, 'compare').resolves(false);\nconst findOneStub = sinon.stub(TestUser, 'findOne').resolves(null);\ntry {\n  await TestUser.login(fakeUsername, fakePassword);\n  expect.fail('Expected an error to be thrown');\n} catch (error) {\n  expect(error.message).to.equal('Invalid credentials');\n}",
                  "err": {},
                  "uuid": "8ef5eedb-4e78-46d7-85d8-f1ef03030ad4",
                  "parentUUID": "fc32bcf8-bf7e-4d9d-951f-9ee229d9a0be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3094eb4a-a74e-40ea-bc2b-d069695adf30",
                "8ef5eedb-4e78-46d7-85d8-f1ef03030ad4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "521dde3c-2e9a-4dac-99a1-0d39228b607f",
          "title": "Employee Test Model",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
          "file": "\\test\\2_employee.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8eadba9-1c2f-4845-a848-3222626eea61",
              "title": "createEmployee",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
              "file": "\\test\\2_employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new employee",
                  "fullTitle": "Employee Test Model createEmployee should create a new employee",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newEmployee = {\n  firstName: 'John',\n  lastName: 'Doe',\n  extension: '1234',\n  email: 'johndoe@example.com',\n  officeCode: 1,\n  reportsTo: null,\n  jobTitle: 'Manager',\n  roleId: 1,\n};\nconst createStub = sinon.stub(EmployeeTest, 'createEmployee').resolves(newEmployee);\nconst createdEmployee = await EmployeeTest.createEmployee(newEmployee);\nexpect(createdEmployee).to.deep.equal(newEmployee);\ncreateStub.restore();",
                  "err": {},
                  "uuid": "d903273c-b973-43cf-be0a-0f8051e151fd",
                  "parentUUID": "f8eadba9-1c2f-4845-a848-3222626eea61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d903273c-b973-43cf-be0a-0f8051e151fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d7e65cc-3948-4e99-b0fb-136995712d08",
              "title": "getAll",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
              "file": "\\test\\2_employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a list of employees",
                  "fullTitle": "Employee Test Model getAll should return a list of employees",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const employees = [\n  {\n    employeeNumber: 1,\n    firstName: 'John',\n    lastName: 'Doe',\n    extension: '1234',\n    email: 'johndoe@example.com',\n    officeCode: 1,\n    reportsTo: null,\n    jobTitle: 'Manager',\n    roleId: 1,\n  },\n];\nconst findAllStub = sinon.stub(EmployeeTest, 'getAll').resolves(employees);\nconst allEmployees = await EmployeeTest.getAll();\nexpect(allEmployees).to.deep.equal(employees);\nfindAllStub.restore();",
                  "err": {},
                  "uuid": "a8066448-82ba-4eda-be0e-4b8efad93935",
                  "parentUUID": "6d7e65cc-3948-4e99-b0fb-136995712d08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8066448-82ba-4eda-be0e-4b8efad93935"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf166ccf-ebd5-4172-a40d-51617c43a9ed",
              "title": "getById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
              "file": "\\test\\2_employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an employee by ID",
                  "fullTitle": "Employee Test Model getById should return an employee by ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const employee = {\n  employeeNumber: 1,\n  firstName: 'John',\n  lastName: 'Doe',\n  extension: '1234',\n  email: 'johndoe@example.com',\n  officeCode: 1,\n  reportsTo: null,\n  jobTitle: 'Manager',\n  roleId: 1,\n};\nconst findByPkStub = sinon.stub(EmployeeTest, 'getById').resolves(employee);\nconst foundEmployee = await EmployeeTest.getById(employee.employeeNumber);\nexpect(foundEmployee).to.deep.equal(employee);\nfindByPkStub.restore();",
                  "err": {},
                  "uuid": "f37102f8-0893-41af-809d-82217c71778b",
                  "parentUUID": "cf166ccf-ebd5-4172-a40d-51617c43a9ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f37102f8-0893-41af-809d-82217c71778b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dde66c48-8b7e-40b3-8b4b-8148736ba6eb",
              "title": "updateById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
              "file": "\\test\\2_employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an employee",
                  "fullTitle": "Employee Test Model updateById should update an employee",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEmployee = {\n  employeeNumber: 1,\n  firstName: 'John',\n  lastName: 'Doe',\n  extension: '1234',\n  email: 'johndoe@example.com',\n  officeCode: 1,\n  reportsTo: null,\n  jobTitle: 'Manager',\n  roleId: 1,\n};\nconst saveStub = sinon.stub(EmployeeTest, 'updateById').resolves(updatedEmployee);\nconst updated = await EmployeeTest.updateById(updatedEmployee.employeeNumber, updatedEmployee);\nexpect(updated).to.deep.equal(updatedEmployee);\nsaveStub.restore();",
                  "err": {},
                  "uuid": "ca678238-2ff3-422f-b59c-22e37459a7ae",
                  "parentUUID": "dde66c48-8b7e-40b3-8b4b-8148736ba6eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca678238-2ff3-422f-b59c-22e37459a7ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfed9627-bfb5-4358-ab93-1cb810b4a610",
              "title": "deleteById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
              "file": "\\test\\2_employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete an employee",
                  "fullTitle": "Employee Test Model deleteById should delete an employee",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const destroyStub = sinon.stub(EmployeeTest, 'deleteById').resolves(true);\nconst result = await EmployeeTest.deleteById(1);\nexpect(result).to.be.true;\ndestroyStub.restore();",
                  "err": {},
                  "uuid": "1158132e-49d9-4db5-b7fd-1868f8c6877e",
                  "parentUUID": "bfed9627-bfb5-4358-ab93-1cb810b4a610",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1158132e-49d9-4db5-b7fd-1868f8c6877e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b37c627a-8219-4a8e-9bde-431495e9dd96",
          "title": "Customer Test Model",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
          "file": "\\test\\3_customer.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58354218-3294-46dc-b1b4-c8d5535f7dce",
              "title": "createCustomer",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
              "file": "\\test\\3_customer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new customer",
                  "fullTitle": "Customer Test Model createCustomer should create a new customer",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCustomer = {\n  customerName: \"New Customer\",\n  contactLastName: \"Doe\",\n  contactFirstName: \"John\",\n  phone: \"1234567890\",\n  addressLine1: \"123 Main Street\",\n  addressLine2: null,\n  city: \"New York\",\n  state: \"NY\",\n  postalCode: \"10001\",\n  country: \"USA\",\n  salesRepEmployeeNumber: 1,\n  creditLimit: 1000,\n};\nconst createStub = sinon.stub(CustomerTest, 'createCustomer').resolves(newCustomer);\nconst createdCustomer = await CustomerTest.createCustomer(newCustomer);\nexpect(createdCustomer).to.deep.equal(newCustomer);\ncreateStub.restore();",
                  "err": {},
                  "uuid": "4e2632d0-f189-4ad7-9059-4859ee865aac",
                  "parentUUID": "58354218-3294-46dc-b1b4-c8d5535f7dce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e2632d0-f189-4ad7-9059-4859ee865aac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ed28f53-64fb-476d-a01f-c4570159affb",
              "title": "getAll",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
              "file": "\\test\\3_customer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a list of customers",
                  "fullTitle": "Customer Test Model getAll should return a list of customers",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const customers = [\n  {\n    customerNumber: 1,\n    customerName: \"New Customer\",\n    contactLastName: \"Doe\",\n    contactFirstName: \"John\",\n    phone: \"1234567890\",\n    addressLine1: \"123 Main Street\",\n    addressLine2: null,\n    city: \"New York\",\n    state: \"NY\",\n    postalCode: \"10001\",\n    country: \"USA\",\n    salesRepEmployeeNumber: 1,\n    creditLimit: 1000,\n  },\n];\nconst findAllStub = sinon.stub(CustomerTest, 'getAll').resolves(customers);\nconst allCustomers = await CustomerTest.getAll();\nexpect(allCustomers).to.deep.equal(customers);\nfindAllStub.restore();",
                  "err": {},
                  "uuid": "d580247a-f6ef-4df5-a6b8-781b0ca8c44f",
                  "parentUUID": "8ed28f53-64fb-476d-a01f-c4570159affb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d580247a-f6ef-4df5-a6b8-781b0ca8c44f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce4209bc-c69f-4c09-8217-d60224f22722",
              "title": "getById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
              "file": "\\test\\3_customer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a customer by ID",
                  "fullTitle": "Customer Test Model getById should return a customer by ID",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const customer = {\n  customerNumber: 1,\n  customerName: \"New Customer\",\n  contactLastName: \"Doe\",\n  contactFirstName: \"John\",\n  phone: \"1234567890\",\n  addressLine1: \"123 Main Street\",\n  addressLine2: null,\n  city: \"New York\",\n  state: \"NY\",\n  postalCode: \"10001\",\n  country: \"USA\",\n  salesRepEmployeeNumber: 1,\n  creditLimit: 1000,\n};\nconst findByPkStub = sinon.stub(CustomerTest, 'getById').resolves(customer);\nconst foundCustomer = await CustomerTest.getById(customer.customerNumber);\nexpect(foundCustomer).to.deep.equal(customer);\nfindByPkStub.restore();",
                  "err": {},
                  "uuid": "046a92ff-c4ef-4085-b7a0-cc701d3c2804",
                  "parentUUID": "ce4209bc-c69f-4c09-8217-d60224f22722",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "046a92ff-c4ef-4085-b7a0-cc701d3c2804"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50186ebc-fbd2-4e4d-9d15-e45633d6dca4",
              "title": "updateById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
              "file": "\\test\\3_customer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a customer",
                  "fullTitle": "Customer Test Model updateById should update a customer",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCustomer = {\n  customerNumber: 1,\n  customerName: \"Updated Customer\",\n  contactLastName: \"Smith\",\n  contactFirstName: \"Jane\",\n  phone: \"0987654321\",\n  addressLine1: \"456 Main Street\",\n  city: \"New York\",\n  country: \"USA\"\n};\nconst saveStub = sinon.stub(CustomerTest, 'updateById').resolves(updatedCustomer);\nconst updated = await CustomerTest.updateById(updatedCustomer.customerNumber, updatedCustomer);\nexpect(updated).to.deep.equal(updatedCustomer);\nsaveStub.restore();",
                  "err": {},
                  "uuid": "8d2fdd83-da34-415d-880a-b9506787ae37",
                  "parentUUID": "50186ebc-fbd2-4e4d-9d15-e45633d6dca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d2fdd83-da34-415d-880a-b9506787ae37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bdec2959-70b3-4a22-91da-2cb6e930946b",
              "title": "deleteById",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
              "file": "\\test\\3_customer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a customer",
                  "fullTitle": "Customer Test Model deleteById should delete a customer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const destroyStub = sinon.stub(CustomerTest, 'deleteById').resolves(true);\nconst result = await CustomerTest.deleteById(1);\nexpect(result).to.be.true;\ndestroyStub.restore();",
                  "err": {},
                  "uuid": "3573bbd0-870e-4502-b8ad-f92b3425ff5d",
                  "parentUUID": "bdec2959-70b3-4a22-91da-2cb6e930946b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3573bbd0-870e-4502-b8ad-f92b3425ff5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}