{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-13T08:24:36.545Z",
    "end": "2023-06-13T08:24:37.765Z",
    "duration": 1220,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3131d6a-f6e0-4775-bcab-345ccdd4e1ee",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "53f18775-fbef-4dee-b11b-6444bd20ae1a",
          "title": "POST /users",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\auth.test.js",
          "file": "\\test\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /users\"",
              "fullTitle": "POST /users \"before all\" hook in \"POST /users\"",
              "timedOut": false,
              "duration": 67,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete all existing users before each test\nawait User.destroy({ where: {} });",
              "err": {},
              "uuid": "a28a3395-16a2-479d-a387-38c24f13e69b",
              "parentUUID": "53f18775-fbef-4dee-b11b-6444bd20ae1a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create new user successfully",
              "fullTitle": "POST /users Create new user successfully",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  userName: 'testuser',\n  password: 'Test@123',\n  employeeNumber: 1,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(newUser)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('user');\n    res.body.user.should.have.property('userName').eql(newUser.userName);\n    res.body.user.should.have.property('employeeNumber').eql(newUser.employeeNumber);\n    res.body.should.have.property('token');\n    done();\n  });",
              "err": {},
              "uuid": "d2f2f26e-9781-4bd7-85d8-b363e4e4771c",
              "parentUUID": "53f18775-fbef-4dee-b11b-6444bd20ae1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new user fails with invalid data",
              "fullTitle": "POST /users Create new user fails with invalid data",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = {\n  userName: 'te',\n  password: 'Test123',\n  employeeNumber: 2,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(invalidUser)\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message');\n    done();\n  });",
              "err": {},
              "uuid": "102e0f24-4cc5-41c7-ba79-f2816fe243ec",
              "parentUUID": "53f18775-fbef-4dee-b11b-6444bd20ae1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login user with valid credentials",
              "fullTitle": "POST /users Login user with valid credentials",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginUser().then((res) => {\n  res.should.have.status(200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('token');\n  done();\n});",
              "err": {},
              "uuid": "f94b46ba-b173-4e29-a734-8feba26a8762",
              "parentUUID": "53f18775-fbef-4dee-b11b-6444bd20ae1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2f2f26e-9781-4bd7-85d8-b363e4e4771c",
            "102e0f24-4cc5-41c7-ba79-f2816fe243ec",
            "f94b46ba-b173-4e29-a734-8feba26a8762"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 422,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f76086fb-976d-49c9-9716-d8d575234bea",
          "title": "Customer Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\customer.test.js",
          "file": "\\test\\customer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Customer Test\"",
              "fullTitle": "Customer Test \"before all\" hook in \"Customer Test\"",
              "timedOut": false,
              "duration": 186,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "1747e82d-d80d-4453-8fa9-9ba561f8acba",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetch list of customers",
              "fullTitle": "Customer Test Fetch list of customers",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "70d3a330-d16b-4139-8789-340c0a990a6d",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new customer successfully",
              "fullTitle": "Customer Test Create new customer successfully",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newCustomer = {\n  customerName: \"New Customer\",\n  contractLastName: \"Doe\",\n  contractFirstName: \"John\",\n  phone: \"1234567890\",\n  addressLine1: \"123 Main Street\",\n  addressLine2: null,\n  city: \"New York\",\n  state: \"NY\",\n  postalCode: \"10001\",\n  country: \"USA\",\n  salesRepEmployeeNumber: 1,\n  creditLimit: 1000,\n};\n\nchai.request(app)\n  .post('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newCustomer)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Created customer successfully\");\n    customerId = res.body.data.customerNumber;\n    done();\n  });",
              "err": {},
              "uuid": "0b07334e-c4b5-4834-86b7-15c8b78ce0fc",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch customer by newly created ID",
              "fullTitle": "Customer Test Fetch customer by newly created ID",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "da4e0ab8-4073-495d-8694-23e0e826f4fd",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer successfully",
              "fullTitle": "Customer Test Update customer successfully",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedCustomer = {\n  customerName: \"Updated Customer\",\n  contactLastName: \"Smith\",\n  contactFirstName: \"Jane\",\n  phone: \"0987654321\",\n  addressLine1: \"456 Main Street\",\n  city: \"New York\",\n  country: \"USA\"\n};\n\nchai.request(app)\n  .put(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedCustomer)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Updated customer successfully');\n    done();\n  });",
              "err": {},
              "uuid": "68f27979-f4f9-4aaf-b29e-941d07dc44d1",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer successfully",
              "fullTitle": "Customer Test Delete customer successfully",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    console.log(res.body);\n    res.should.have.status(204);\n    res.body.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "adbfe7d6-3cd0-4221-83c8-1dba535a2f1e",
              "parentUUID": "f76086fb-976d-49c9-9716-d8d575234bea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70d3a330-d16b-4139-8789-340c0a990a6d",
            "0b07334e-c4b5-4834-86b7-15c8b78ce0fc",
            "da4e0ab8-4073-495d-8694-23e0e826f4fd",
            "68f27979-f4f9-4aaf-b29e-941d07dc44d1",
            "adbfe7d6-3cd0-4221-83c8-1dba535a2f1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "33f7d646-cb82-4a98-9656-b710d55b986c",
          "title": "Employee Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\employee.test.js",
          "file": "\\test\\employee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Employee Test\"",
              "fullTitle": "Employee Test \"before all\" hook in \"Employee Test\"",
              "timedOut": false,
              "duration": 167,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "cea8489d-3852-4a74-8b68-bb0783a94595",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Employee Test\"",
              "fullTitle": "Employee Test \"after all\" hook in \"Employee Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete all existing users before each test\nawait User.destroy({ where: {} });",
              "err": {},
              "uuid": "00562032-2ee0-40fe-be5e-f1dfc82bd74c",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Fetch list of employees",
              "fullTitle": "Employee Test Fetch list of employees",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "f8ed3174-baec-4fee-91c7-00784f903e85",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new employee successfully",
              "fullTitle": "Employee Test Create new employee successfully",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = {\n  firstName: \"Alight\",\n  lastName: \"Legend\",\n  extension: \"Legend\",\n  email: \"111@gmail.com\",\n  officeCode: 3,\n  reportsTo: null,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .post('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newEmployee)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Employee created successfully\");\n    idTest = res.body.data.id;\n    done();\n  });",
              "err": {},
              "uuid": "ef3d9da3-ec88-4d88-a588-5d71ebeccf47",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch employee by newly created ID",
              "fullTitle": "Employee Test Fetch employee by newly created ID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "7c1c904d-2bb0-458f-a6e7-da0e857512da",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update employee successfully",
              "fullTitle": "Employee Test Update employee successfully",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmployee = {\n  firstName: \"Updated\",\n  extension: \"Legend\",\n  email: \"updated@gmail.com\",\n  officeCode:  3,\n  reportsTo: 2,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .put(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee updated successfully');\n    done();\n  });",
              "err": {},
              "uuid": "b1e0923a-43a9-4ad4-b9ff-d96012fe07e2",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete employee successfully",
              "fullTitle": "Employee Test Delete employee successfully",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee deleted successfully');\n    done();\n  });",
              "err": {},
              "uuid": "e9cbb514-ef1e-41b7-88e2-d9b19f1abbf0",
              "parentUUID": "33f7d646-cb82-4a98-9656-b710d55b986c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8ed3174-baec-4fee-91c7-00784f903e85",
            "ef3d9da3-ec88-4d88-a588-5d71ebeccf47",
            "7c1c904d-2bb0-458f-a6e7-da0e857512da",
            "b1e0923a-43a9-4ad4-b9ff-d96012fe07e2",
            "e9cbb514-ef1e-41b7-88e2-d9b19f1abbf0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}