{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-15T03:43:48.292Z",
    "end": "2023-06-15T03:43:49.913Z",
    "duration": 1621,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1b3730c9-69a5-41ce-afba-fe22e0452fd3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f4cc97c-9eae-4e81-8fc8-f2e34d386533",
          "title": "POST /users",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
          "file": "\\test\\1_auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /users\"",
              "fullTitle": "POST /users \"before all\" hook in \"POST /users\"",
              "timedOut": false,
              "duration": 100,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete all existing users before each test\nawait User.destroy({ where: {userName: 'testuser'} });",
              "err": {},
              "uuid": "dd4771b4-7e8b-43f7-8f7e-e0f46dcb3449",
              "parentUUID": "0f4cc97c-9eae-4e81-8fc8-f2e34d386533",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create new user successfully",
              "fullTitle": "POST /users Create new user successfully",
              "timedOut": false,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  userName: 'testuser',\n  password: 'Test@123',\n  employeeNumber: 9,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(newUser)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('user');\n    res.body.user.should.have.property('userName').eql(newUser.userName);\n    res.body.user.should.have.property('employeeNumber').eql(newUser.employeeNumber);\n    res.body.should.have.property('token');\n    done();\n  });",
              "err": {},
              "uuid": "5af5088a-b276-428f-912d-a92c4f938f90",
              "parentUUID": "0f4cc97c-9eae-4e81-8fc8-f2e34d386533",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new user fails with invalid data",
              "fullTitle": "POST /users Create new user fails with invalid data",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = {\n  userName: 'te',\n  password: 'Test123',\n  employeeNumber: 2,\n};\nchai.request(app)\n  .post('/user/register')\n  .send(invalidUser)\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message');\n    done();\n  });",
              "err": {},
              "uuid": "70904402-5c62-493c-81a6-b9c2212b6d92",
              "parentUUID": "0f4cc97c-9eae-4e81-8fc8-f2e34d386533",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login user with valid credentials",
              "fullTitle": "POST /users Login user with valid credentials",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginUser().then((res) => {\n  res.should.have.status(200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('token');\n  done();\n});",
              "err": {},
              "uuid": "92b05e98-4c5f-49a6-b74a-b5d5eb09fbfb",
              "parentUUID": "0f4cc97c-9eae-4e81-8fc8-f2e34d386533",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5af5088a-b276-428f-912d-a92c4f938f90",
            "70904402-5c62-493c-81a6-b9c2212b6d92",
            "92b05e98-4c5f-49a6-b74a-b5d5eb09fbfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 566,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
          "title": "Employee Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
          "file": "\\test\\2_employee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Employee Test\"",
              "fullTitle": "Employee Test \"before all\" hook in \"Employee Test\"",
              "timedOut": false,
              "duration": 215,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "8576b8dd-eacc-42e9-af31-fc72f6853f3c",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetch list of employees",
              "fullTitle": "Employee Test Fetch list of employees",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "d2a94fa8-a5ee-4508-9eb5-ddb30ef546cc",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new employee successfully",
              "fullTitle": "Employee Test Create new employee successfully",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = {\n  firstName: \"Alight\",\n  lastName: \"Legend\",\n  extension: \"Legend\",\n  email: \"111@gmail.com\",\n  officeCode: 3,\n  reportsTo: null,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .post('/employees')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newEmployee)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Employee created successfully\");\n    idTest = res.body.data.id;\n    done();\n  });",
              "err": {},
              "uuid": "46fec72e-a242-44fe-8f39-b6d89504feca",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch employee by newly created ID",
              "fullTitle": "Employee Test Fetch employee by newly created ID",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "7153b3be-8e3e-4b7d-a2e1-dd5c3ecb61fe",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update employee successfully",
              "fullTitle": "Employee Test Update employee successfully",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmployee = {\n  firstName: \"Updated\",\n  extension: \"Legend\",\n  email: \"updated@gmail.com\",\n  officeCode:  3,\n  reportsTo: 2,\n  jobTitle: \"president\",\n  roleId: 1\n};\nchai.request(app)\n  .put(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee updated successfully');\n    done();\n  });",
              "err": {},
              "uuid": "21f846fb-2548-4d3d-8807-b36f713df0ab",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete employee successfully",
              "fullTitle": "Employee Test Delete employee successfully",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/employees/${idTest}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Employee deleted successfully');\n    done();\n  });",
              "err": {},
              "uuid": "0ba4359a-5d6e-4cb6-af19-a3cb3dc2a183",
              "parentUUID": "51bf3dab-7394-41db-9826-25fb72d7b1c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2a94fa8-a5ee-4508-9eb5-ddb30ef546cc",
            "46fec72e-a242-44fe-8f39-b6d89504feca",
            "7153b3be-8e3e-4b7d-a2e1-dd5c3ecb61fe",
            "21f846fb-2548-4d3d-8807-b36f713df0ab",
            "0ba4359a-5d6e-4cb6-af19-a3cb3dc2a183"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0951c08-87e1-4617-b488-cb447da16a75",
          "title": "Customer Test",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
          "file": "\\test\\3_customer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Customer Test\"",
              "fullTitle": "Customer Test \"before all\" hook in \"Customer Test\"",
              "timedOut": false,
              "duration": 199,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginResponse = await loginUser();\ntoken = loginResponse.body.token;",
              "err": {},
              "uuid": "53fbde24-f48b-4c69-8fb2-c56ea0873581",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Customer Test\"",
              "fullTitle": "Customer Test \"after all\" hook in \"Customer Test\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the user with username 'testUser' after all tests are completed\nawait User.destroy({ where: {userName: 'testuser'} });",
              "err": {},
              "uuid": "eb725bd9-bc28-4b7a-8aa5-cbb5744626b3",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Fetch list of customers",
              "fullTitle": "Customer Test Fetch list of customers",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('array');\n    done();\n  });",
              "err": {},
              "uuid": "b43c19f7-9700-43ac-8760-3fba571e8d02",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new customer successfully",
              "fullTitle": "Customer Test Create new customer successfully",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newCustomer = {\n  customerName: \"New Customer\",\n  contactLastName: \"Doe\",\n  contactFirstName: \"John\",\n  phone: \"1234567890\",\n  addressLine1: \"123 Main Street\",\n  addressLine2: null,\n  city: \"New York\",\n  state: \"NY\",\n  postalCode: \"10001\",\n  country: \"USA\",\n  salesRepEmployeeNumber: 1,\n  creditLimit: 1000,\n};\n\nchai.request(app)\n  .post('/customers')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newCustomer)\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('status').eql(\"Success\");\n    res.body.should.have.property('message').eql(\"Created customer successfully\");\n    customerId = res.body.data.customerNumber;\n    done();\n  });",
              "err": {},
              "uuid": "602661b9-fd11-4e8f-b92b-7f6db9220e42",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch customer by newly created ID",
              "fullTitle": "Customer Test Fetch customer by newly created ID",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.data.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "503794cc-ac37-4d54-bc2e-eb944a33061a",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer successfully",
              "fullTitle": "Customer Test Update customer successfully",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedCustomer = {\n  customerName: \"Updated Customer\",\n  contactLastName: \"Smith\",\n  contactFirstName: \"Jane\",\n  phone: \"0987654321\",\n  addressLine1: \"456 Main Street\",\n  city: \"New York\",\n  country: \"USA\"\n};\n\nchai.request(app)\n  .put(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedCustomer)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    res.body.should.have.property('message').eql('Updated customer successfully');\n    done();\n  });",
              "err": {},
              "uuid": "405a12d5-f178-41bf-9d59-4aa7871a3b9d",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer successfully",
              "fullTitle": "Customer Test Delete customer successfully",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/customers/${customerId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(204);\n    res.body.should.be.a('object');\n    done();\n  });",
              "err": {},
              "uuid": "3306b65a-7c6b-41ca-875b-5de7e54db115",
              "parentUUID": "f0951c08-87e1-4617-b488-cb447da16a75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b43c19f7-9700-43ac-8760-3fba571e8d02",
            "602661b9-fd11-4e8f-b92b-7f6db9220e42",
            "503794cc-ac37-4d54-bc2e-eb944a33061a",
            "405a12d5-f178-41bf-9d59-4aa7871a3b9d",
            "3306b65a-7c6b-41ca-875b-5de7e54db115"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 181,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}