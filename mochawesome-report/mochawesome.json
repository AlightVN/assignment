{
  "stats": {
    "suites": 5,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-19T09:46:59.276Z",
    "end": "2023-06-19T09:47:00.067Z",
    "duration": 791,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c96f6455-074e-4cc7-8cae-3c6df5ff388f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c667e2d2-80c0-4bbe-b68a-f18e761f06af",
          "title": "User Controller",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
          "file": "\\test\\1_auth.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller\"",
              "fullTitle": "User Controller \"after each\" hook in \"User Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3e16a70a-6dea-4781-b9eb-e462fa006093",
              "parentUUID": "c667e2d2-80c0-4bbe-b68a-f18e761f06af",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c5657f91-48f6-4199-82e8-8d6d43e04d67",
              "title": "login",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
              "file": "\\test\\1_auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a JWT token if username and password are valid",
                  "fullTitle": "User Controller login should return a JWT token if username and password are valid",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = 'testUser';\nconst password = 'testPassword';\nconst user = {\n  userName: 'testUser',\n  password: await bcrypt.hash('testPassword', 10),\n};\nconst req = { body: { userName, password } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis(),\n};\nsinon.stub(User, 'findOne').resolves(user);\nsinon.stub(bcrypt, 'compare').resolves(true);\nsinon.stub(jwt, 'sign').returns('mockedToken');\nawait UserController.login(req, res);\nexpect(User.findOne.calledOnceWith({ where: { userName } })).to.be.true;\nexpect(bcrypt.compare.calledOnceWith(password, user.password)).to.be.true;\nexpect(jwt.sign.calledOnceWith({ userName }, process.env.JWT_SECRET)).to.be.true;\nexpect(res.json.calledOnceWith({\n  status: 'Success',\n  message: 'Login Account successfully',\n  token: 'mockedToken',\n})).to.be.true;",
                  "err": {},
                  "uuid": "1e5f2e0d-6364-44e4-9c10-bb01b4ae3f09",
                  "parentUUID": "c5657f91-48f6-4199-82e8-8d6d43e04d67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if username or password is incorrect",
                  "fullTitle": "User Controller login should return an error if username or password is incorrect",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = 'testUser';\nconst password = 'wrongPassword';\nconst req = { body: { userName, password } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis(),\n};\nsinon.stub(User, 'findOne').resolves(null);\nsinon.stub(bcrypt, 'compare').resolves(false);\n    \nawait UserController.login(req, res);\n    \nUser.findOne.calledOnceWith({ where: { userName } });\nbcrypt.compare.calledOnceWith(password, null);\nres.status.calledOnceWith(401);\nres.json.calledOnceWith({ message: 'Incorrect username or password. You trying to cheat?' });",
                  "err": {},
                  "uuid": "503dafd3-451d-4364-b4e6-27960a19ad13",
                  "parentUUID": "c5657f91-48f6-4199-82e8-8d6d43e04d67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e5f2e0d-6364-44e4-9c10-bb01b4ae3f09",
                "503dafd3-451d-4364-b4e6-27960a19ad13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e5aef29-dada-4741-b77f-30fc3798a126",
              "title": "register",
              "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\1_auth.test.js",
              "file": "\\test\\1_auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an error if an error occurs during user creation",
                  "fullTitle": "User Controller register should return an error if an error occurs during user creation",
                  "timedOut": false,
                  "duration": 192,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = 'newUser';\nconst password = 'newPassword';\nconst req = { body: { userName, password } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis(),\n};\n    \nsinon.stub(User, 'findOne').resolves(null);\n    \nconst createStub = sinon.stub(User, 'create');\ncreateStub.withArgs({ userName, password }).rejects(new Error('Mocked error'));\n    \nawait UserController.register(req, res);\n    \nexpect(User.findOne.calledOnceWith({ where: { userName } })).to.be.true;\nexpect(createStub.calledOnce).to.be.true;\nexpect(res.status.calledOnceWith(500)).to.be.true;\nexpect(res.json.calledOnceWith({ message: 'An error occurred. Please try again later.' })).to.be.true;\n    \nUser.findOne.restore();\ncreateStub.restore();",
                  "err": {},
                  "uuid": "0ebdb15a-a01c-4eb7-bedd-f1da34dcae5b",
                  "parentUUID": "5e5aef29-dada-4741-b77f-30fc3798a126",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if an error occurs during user creation",
                  "fullTitle": "User Controller register should return an error if an error occurs during user creation",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = 'newUser';\nconst password = 'newPassword';\nconst req = { body: { userName, password } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis(),\n};\nsinon.stub(User, 'findOne').resolves(null);\nsinon.stub(User, 'create').rejects(new Error('Mocked error'));\n   \nawait UserController.register(req, res);\n   \n User.findOne.calledOnceWith({ where: { userName } });\nUser.create.calledOnceWith({ userName, password });\nres.status.calledOnceWith(500);\n  res.json.calledOnceWith({ message: 'An error occurred. Please try again later.' });",
                  "err": {},
                  "uuid": "4d024902-6c67-44ce-bab6-a2c9129d9a7d",
                  "parentUUID": "5e5aef29-dada-4741-b77f-30fc3798a126",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ebdb15a-a01c-4eb7-bedd-f1da34dcae5b",
                "4d024902-6c67-44ce-bab6-a2c9129d9a7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 363,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
          "title": "Employee Controller",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\2_employee.test.js",
          "file": "\\test\\2_employee.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Employee Controller\"",
              "fullTitle": "Employee Controller \"after each\" hook in \"Employee Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "05dab466-07cf-4e80-b571-3c379996f055",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get a list of employees",
              "fullTitle": "Employee Controller should get a list of employees",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser' },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst employees = [\n  { id: 1, firstName: 'John', lastName: 'Doe' },\n  { id: 2, firstName: 'Jane', lastName: 'Doe' },\n];\nsinon.stub(Employee, 'findAll').resolves(employees);\nawait EmployeeController.getEmployees(req, res, next);\nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Retrieved employees successfully',\n  data: employees,\n}).should.be.true;",
              "err": {},
              "uuid": "70a10445-0d81-481f-9ea4-d137069b1cd3",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new employee",
              "fullTitle": "Employee Controller should create a new employee",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser' },\n  body: {\n    firstName: 'John',\n    lastName: 'Doe',\n    extension: '1234',\n    email: 'john.doe@example.com',\n    officeCode: 1,\n    reportsTo: 2,\n    jobTitle: 'Software Engineer',\n    roleId: 1,\n  },\n});\nconst res = mockRes();\nconst next = sinon.stub();\n  \nconst createdEmployee = { ...req.body, employeeNumber: 1 };\nsinon.stub(Employee, 'create').resolves(createdEmployee);\n  \nawait EmployeeController.createEmployee(req, res, next);\n  \nres.status.calledWith(201).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Employee created successfully',\n  data: { id: createdEmployee.employeeNumber },\n}).should.be.true;",
              "err": {},
              "uuid": "56f45d5d-f3ca-4093-937d-b7ea12da1dfc",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an employee by ID",
              "fullTitle": "Employee Controller should update an employee by ID",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser' },\n  params: { id: 1 },\n  body: {\n    firstName: 'John',\n    lastName: 'Doe',\n  },\n});\nconst res = mockRes();\nconst next = sinon.stub();\n  \nconst employee = {\n  employeeNumber: 1,\n  firstName: 'John',\n  lastName: 'Doe',\n  save: sinon.stub().resolves(),\n};\nsinon.stub(Employee, 'findByPk').resolves(employee);\n  \nawait EmployeeController.updateEmployeeById(req, res, next);\n  \nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Employee updated successfully',\n  data: employee,\n}).should.be.true;",
              "err": {},
              "uuid": "6a0a5869-a6b6-4831-827c-292693f7f0fd",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an employee by ID",
              "fullTitle": "Employee Controller should delete an employee by ID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser' },\n  params: { id: 1 },\n});\nconst res = mockRes();\nconst next = sinon.stub();\n  \nconst employee = { employeeNumber: 1, destroy: sinon.stub().resolves() };\nsinon.stub(Employee, 'findByPk').resolves(employee);\n  \nawait EmployeeController.deleteEmployee(req, res, next);\n  \nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Employee deleted successfully',\n}).should.be.true;",
              "err": {},
              "uuid": "44eef611-9aeb-4bc3-ac39-5de22633d758",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get an employee by ID",
              "fullTitle": "Employee Controller should get an employee by ID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser' },\n  params: { id: 1 },\n});\nconst res = mockRes();\nconst next = sinon.stub();\n  \nconst employee = { employeeNumber: 1, firstName: 'John', lastName: 'Doe' };\nsinon.stub(Employee, 'findByPk').resolves(employee);\n  \nawait EmployeeController.getEmployeeById(req, res, next);\n  \nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Retrieved employee successfully',\n  data: employee,\n}).should.be.true;",
              "err": {},
              "uuid": "edd24580-01fd-452d-a040-55bed681b491",
              "parentUUID": "f38943d1-d505-481a-b3d9-5f5a7cfc92c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70a10445-0d81-481f-9ea4-d137069b1cd3",
            "56f45d5d-f3ca-4093-937d-b7ea12da1dfc",
            "6a0a5869-a6b6-4831-827c-292693f7f0fd",
            "44eef611-9aeb-4bc3-ac39-5de22633d758",
            "edd24580-01fd-452d-a040-55bed681b491"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 86,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b770757d-2b41-4df5-881b-e1bb595aacb8",
          "title": "Customer Controller",
          "fullFile": "D:\\FA\\Thang 05\\17-05\\2_Assignments\\NodeJs_Training\\test\\3_customer.test.js",
          "file": "\\test\\3_customer.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Customer Controller\"",
              "fullTitle": "Customer Controller \"after each\" hook in \"Customer Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "73435372-7e8b-4f73-a182-c3193209279d",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get a list of customers",
              "fullTitle": "Customer Controller should get a list of customers",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser', role: 'admin' },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst customers = [\n  { id: 1, customerName: 'John Doe' },\n  { id: 2, customerName: 'Jane Doe' },\n];\nsinon.stub(Customer, 'findAll').resolves(customers);\nawait CustomerController.getCustomers(req, res, next);\nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Retrieved customers successfully',\n  data: customers,\n}).should.be.true;",
              "err": {},
              "uuid": "bfcde3c6-352c-4011-bd73-6da50286e2ad",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new customer",
              "fullTitle": "Customer Controller should create a new customer",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser', role: 'admin' },\n  body: {\n    customerName: 'John Doe',\n    contactLastName: 'Doe',\n    contactFirstName: 'John',\n    phone: '123-456-7890',\n    addressLine1: '123 Main St',\n    addressLine2: '',\n    city: 'New York',\n    state: 'NY',\n    postalCode: '10001',\n    country: 'USA',\n    salesRepEmployeeNumber: 1,\n    creditLimit: 1000,\n  },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst createdCustomer = { ...req.body, customerNumber: 1 };\nsinon.stub(Customer, 'create').resolves(createdCustomer);\nawait CustomerController.createCustomer(req, res, next);\nres.status.calledWith(201).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Created customer successfully',\n  data: createdCustomer,\n}).should.be.true;",
              "err": {},
              "uuid": "9cf8b5bc-506a-4f46-a175-53ee2f8bc26d",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a customer by ID",
              "fullTitle": "Customer Controller should update a customer by ID",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser', role: 'admin' },\n  params: { id: 1 },\n  body: {\n    customerName: 'John Doe',\n    contactLastName: 'Doe',\n    contactFirstName: 'John',\n  },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst customer = {\n  customerNumber: 1,\n  customerName: 'John Doe',\n  contactLastName: 'Doe',\n  contactFirstName: 'John',\n  save: sinon.stub().resolves(),\n};\nsinon.stub(Customer, 'findByPk').resolves(customer);\nawait CustomerController.updateCustomerById(req, res, next);\nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Updated customer successfully',\n  data: customer,\n}).should.be.true;",
              "err": {},
              "uuid": "e7175351-aa22-472e-bb62-d1b24f3297c2",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a customer by ID",
              "fullTitle": "Customer Controller should delete a customer by ID",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser', role: 'admin' },\n  params: { id: 1 },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst customer = { customerNumber: 1, destroy: sinon.stub().resolves() };\nsinon.stub(Customer, 'findByPk').resolves(customer);\nawait CustomerController.deleteCustomer(req, res, next);\nres.status.calledWith(204).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Deleted customer successfully',\n}).should.be.true;",
              "err": {},
              "uuid": "6cfe4c58-e152-4f27-8329-3abfc41337ab",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a customer by ID",
              "fullTitle": "Customer Controller should get a customer by ID",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = mockReq({\n  userData: { userName: 'testUser', role: 'admin' },\n  params: { id: 1 },\n});\nconst res = mockRes();\nconst next = sinon.stub();\nconst customer = { customerNumber: 1, customerName: 'John Doe' };\nsinon.stub(Customer, 'findByPk').resolves(customer);\nawait CustomerController.getCustomerById(req, res, next);\nres.status.calledWith(200).should.be.true;\nres.json.calledWith({\n  status: 'Success',\n  message: 'Retrieved customer information successfully',\n  data: customer,\n}).should.be.true;",
              "err": {},
              "uuid": "8b13c769-1a94-4069-a24b-65bcc0ed552c",
              "parentUUID": "b770757d-2b41-4df5-881b-e1bb595aacb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfcde3c6-352c-4011-bd73-6da50286e2ad",
            "9cf8b5bc-506a-4f46-a175-53ee2f8bc26d",
            "e7175351-aa22-472e-bb62-d1b24f3297c2",
            "6cfe4c58-e152-4f27-8329-3abfc41337ab",
            "8b13c769-1a94-4069-a24b-65bcc0ed552c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}